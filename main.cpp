#include <cstdio>

struct d_t
{
    int i{1}; // предварительная инициализация поля структуры
};

void printa(const d_t * array, const int count) 
// pointer decay - явление характеризующееся потерей информации о 
// свойствах массива при передаче в функцию в качестве аргумента
{
    for (size_t i = 0; i < count; i++)
    {
        printf("%d ", array[i].i + 10);
    }
}

int main(int argc, char const *argv[])
{
    // "куча" - heap (динамическая память)
    // "стопка" - stack (статическая память)

    // переменная создается на stack
    // значение хранится по адресу переменной:
    d_t first = {2}; // инициализация значения первого поля структуры

    // переменная создается на stack, т.к. это указатель
    // значение необходимо создать на heap:
    d_t * second = new d_t {2}; // инициализация первого поля структуры в момент выделения памяти

    // вывод значений поля структуры по значению (.) и по ссылке (->)
    printf("%d %d", first.i, second->i);

    delete second; // освобождение памяти
    second = nullptr; // обнуление адреса, чтобы избежать проблемы c dangling pointer
    // dangling pointer - явление характеризующееся присутствием неиспользуемого адреса в программе

    // статический массив структур
    d_t a [] = {{1}, {2}, {3}, {4}, {5}};

    printf("\n");
    printa(a, 5);
}
